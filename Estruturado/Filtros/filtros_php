filter_input_array

(PHP 5 >= 5.2.0, PHP 7)

filter_input_array — Gets external variables and optionally filters them

Description
filter_input_array ( int $type [, mixed $definition [, bool $add_empty = TRUE ]] ) : mixed

This function is useful for retrieving many values without repetitively calling filter_input().

Parameters

type

    One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.
definition

    An array defining the arguments. A valid key is a string containing a variable name and a valid value is either a filter type, or an array optionally specifying the filter, flags and options. If the value is an array, valid keys are filter which specifies the filter type, flags which specifies any flags that apply to the filter, and options which specifies any options that apply to the filter. See the example below for a better understanding.

    This parameter can be also an integer holding a filter constant. Then all values in the input array are filtered by this filter.
add_empty

    Add missing keys as NULL to the return value.

Return Values

An array containing the values of the requested variables on success. If the input array designated by type is not populated, the function returns NULL if the FILTER_NULL_ON_FAILURE flag is not given, or FALSE otherwise. For other failures, FALSE is returned.

An array value will be FALSE if the filter fails, or NULL if the variable is not set. Or if the flag FILTER_NULL_ON_FAILURE is used, it returns FALSE if the variable is not set and NULL if the filter fails. If the add_empty parameter is FALSE, no array element will be added for unset variables.
Examples

Example #1 A filter_input_array() example
<?php
error_reporting(E_ALL | E_STRICT);
/* data actually came from POST
$_POST = array(
    'product_id' => 'libgd<script>',
    'component'  => array('10'),
    'version'    => '2.0.33',
    'testarray'  => array('2', '23', '10', '12'),
    'testscalar' => '2',
);
*/

$args = array(
    'product_id'   => FILTER_SANITIZE_ENCODED,
    'component'    => array('filter'    => FILTER_VALIDATE_INT,
                            'flags'     => FILTER_REQUIRE_ARRAY, 
                            'options'   => array('min_range' => 1, 'max_range' => 10)
                           ),
    'version'      => FILTER_SANITIZE_ENCODED,
    'doesnotexist' => FILTER_VALIDATE_INT,
    'testscalar'   => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_REQUIRE_SCALAR,
                           ),
    'testarray'    => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_REQUIRE_ARRAY,
                           )

);

$myinputs = filter_input_array(INPUT_POST, $args);

var_dump($myinputs);
echo "\n";
?>



filter_input

(PHP 5 >= 5.2.0, PHP 7)

filter_input — Gets a specific external variable by name and optionally filters it
Description
filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] ) : mixed
Parameters

type

    One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.
variable_name

    Name of a variable to get.
filter

    The ID of the filter to apply. The Types of filters manual page lists the available filters.

    If omitted, FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no filtering taking place by default.
options

    Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in "flags" field of array.

Return Values

Value of the requested variable on success, FALSE if the filter fails, or NULL if the variable_name variable is not set. If the flag FILTER_NULL_ON_FAILURE is used, it returns FALSE if the variable is not set and NULL if the filter fails.
Examples

Example #1 A filter_input() example
<?php
$search_html = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_SPECIAL_CHARS);
$search_url = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_ENCODED);
echo "You have searched for $search_html.\n";
echo "<a href='?search=$search_url'>Search again.</a>";
?>

The above example will output something similar to:

You have searched for Me &#38; son.
<a href='?search=Me%20%26%20son'>Search again.</a>

See Also

    filter_var() - Filters a variable with a specified filter
    filter_input_array() - Gets external variables and optionally filters them
    filter_var_array() - Gets multiple variables and optionally filters them
    Types of filters



filter_var

(PHP 5 >= 5.2.0, PHP 7)

filter_var — Filters a variable with a specified filter
Description
filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] ) : mixed
Parameters

variable

    Value to filter. Note that scalar values are converted to string internally before they are filtered.
filter

    The ID of the filter to apply. The Types of filters manual page lists the available filters.

    If omitted, FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no filtering taking place by default.
options

    Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in "flags" field of array. For the "callback" filter, callable type should be passed. The callback must accept one argument, the value to be filtered, and return the value after filtering/sanitizing it.
    <?php
    // for filters that accept options, use this format
    $options = array(
        'options' => array(
            'default' => 3, // value to return if the filter fails
            // other options here
            'min_range' => 0
        ),
        'flags' => FILTER_FLAG_ALLOW_OCTAL,
    );
    $var = filter_var('0755', FILTER_VALIDATE_INT, $options);

    // for filters that only accept flags, you can pass them directly
    $var = filter_var('oops', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);

    // for filters that only accept flags, you can also pass as an array
    $var = filter_var('oops', FILTER_VALIDATE_BOOLEAN,
                      array('flags' => FILTER_NULL_ON_FAILURE));

    // callback validate filter
    function foo($value)
    {
        // Expected format: Surname, GivenNames
        if (strpos($value, ", ") === false) return false;
        list($surname, $givennames) = explode(", ", $value, 2);
        $empty = (empty($surname) || empty($givennames));
        $notstrings = (!is_string($surname) || !is_string($givennames));
        if ($empty || $notstrings) {
            return false;
        } else {
            return $value;
        }
    }
    $var = filter_var('Doe, Jane Sue', FILTER_CALLBACK, array('options' => 'foo'));
    ?>

Return Values

Returns the filtered data, or FALSE if the filter fails.
Examples

Example #1 A filter_var() example
<?php
var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));
var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));
?>

The above example will output:

string(15) "bob@example.com"
bool(false)

See Also

    filter_var_array() - Gets multiple variables and optionally filters them
    filter_input() - Gets a specific external variable by name and optionally filters it
    filter_input_array() - Gets external variables and optionally filters them
    Types of filters
    information about the callback type



filter_var_array

(PHP 5 >= 5.2.0, PHP 7)

filter_var_array — Gets multiple variables and optionally filters them
Description
filter_var_array ( array $data [, mixed $definition [, bool $add_empty = TRUE ]] ) : mixed

This function is useful for retrieving many values without repetitively calling filter_var().
Parameters

data

    An array with string keys containing the data to filter.
definition

    An array defining the arguments. A valid key is a string containing a variable name and a valid value is either a filter type, or an array optionally specifying the filter, flags and options. If the value is an array, valid keys are filter which specifies the filter type, flags which specifies any flags that apply to the filter, and options which specifies any options that apply to the filter. See the example below for a better understanding.

    This parameter can be also an integer holding a filter constant. Then all values in the input array are filtered by this filter.
add_empty

    Add missing keys as NULL to the return value.

Return Values

An array containing the values of the requested variables on success, or FALSE on failure. An array value will be FALSE if the filter fails, or NULL if the variable is not set.
Examples

Example #1 A filter_var_array() example
<?php
error_reporting(E_ALL | E_STRICT);
$data = array(
    'product_id'    => 'libgd<script>',
    'component'     => '10',
    'versions'      => '2.0.33',
    'testscalar'    => array('2', '23', '10', '12'),
    'testarray'     => '2',
);

$args = array(
    'product_id'   => FILTER_SANITIZE_ENCODED,
    'component'    => array('filter'    => FILTER_VALIDATE_INT,
                            'flags'     => FILTER_FORCE_ARRAY, 
                            'options'   => array('min_range' => 1, 'max_range' => 10)
                           ),
    'versions'     => FILTER_SANITIZE_ENCODED,
    'doesnotexist' => FILTER_VALIDATE_INT,
    'testscalar'   => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_REQUIRE_SCALAR,
                           ),
    'testarray'    => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_FORCE_ARRAY,
                           )

);

$myinputs = filter_var_array($data, $args);

var_dump($myinputs);
echo "\n";
?>


Validate filters

Listing of filters for validation ID 	Name 	Options 	Flags 	Description
FILTER_VALIDATE_BOOLEAN 	"boolean" 	default 	FILTER_NULL_ON_FAILURE 	

Returns TRUE for "1", "true", "on" and "yes". Returns FALSE otherwise.

If FILTER_NULL_ON_FAILURE is set, FALSE is returned only for "0", "false", "off", "no", and "", and NULL is returned for all non-boolean values.
FILTER_VALIDATE_DOMAIN 	"validate_domain" 	default 	FILTER_FLAG_HOSTNAME 	

Validates whether the domain name label lengths are valid.

Validates domain names against RFC 1034, RFC 1035, RFC 952, RFC 1123, RFC 2732, RFC 2181, and RFC 1123. Optional flag FILTER_FLAG_HOSTNAME adds ability to specifically validate hostnames (they must start with an alphanumberic character and contain only alphanumerics or hyphens).
FILTER_VALIDATE_EMAIL 	"validate_email" 	default 	FILTER_FLAG_EMAIL_UNICODE 	

Validates whether the value is a valid e-mail address.

In general, this validates e-mail addresses against the syntax in RFC 822, with the exceptions that comments and whitespace folding and dotless domain names are not supported.
FILTER_VALIDATE_FLOAT 	"float" 	default, decimal 	FILTER_FLAG_ALLOW_THOUSAND 	Validates value as float, and converts to float on success.
FILTER_VALIDATE_INT 	"int" 	default, min_range, max_range 	FILTER_FLAG_ALLOW_OCTAL, FILTER_FLAG_ALLOW_HEX 	Validates value as integer, optionally from the specified range, and converts to int on success.
FILTER_VALIDATE_IP 	"validate_ip" 	default 	FILTER_FLAG_IPV4, FILTER_FLAG_IPV6, FILTER_FLAG_NO_PRIV_RANGE, FILTER_FLAG_NO_RES_RANGE 	Validates value as IP address, optionally only IPv4 or IPv6 or not from private or reserved ranges.
FILTER_VALIDATE_MAC 	"validate_mac_address" 	default 	  	Validates value as MAC address.
FILTER_VALIDATE_REGEXP 	"validate_regexp" 	default, regexp 	  	Validates value against regexp, a Perl-compatible regular expression.
FILTER_VALIDATE_URL 	"validate_url" 	default 	FILTER_FLAG_SCHEME_REQUIRED, FILTER_FLAG_HOST_REQUIRED, FILTER_FLAG_PATH_REQUIRED, FILTER_FLAG_QUERY_REQUIRED 	Validates value as URL (according to » http://www.faqs.org/rfcs/rfc2396), optionally with required components. Beware a valid URL may not specify the HTTP protocol http:// so further validation may be required to determine the URL uses an expected protocol, e.g. ssh:// or mailto:. Note that the function will only find ASCII URLs to be valid; internationalized domain names (containing non-ASCII characters) will fail.

    Note:

    As of PHP 5.4.11, the numbers +0 and -0 validate as both integers as well as floats (using FILTER_VALIDATE_FLOAT and FILTER_VALIDATE_INT). Before PHP 5.4.11 they only validated as floats (using FILTER_VALIDATE_FLOAT).

    When default is set to option, default's value is used if value is not validated. 


Sanitize filters

List of filters for sanitization ID 	Name 	Flags 	Description
FILTER_SANITIZE_EMAIL 	"email" 	  	Remove all characters except letters, digits and !#$%&'*+-=?^_`{|}~@.[].
FILTER_SANITIZE_ENCODED 	"encoded" 	FILTER_FLAG_STRIP_LOW, FILTER_FLAG_STRIP_HIGH, FILTER_FLAG_STRIP_BACKTICK, FILTER_FLAG_ENCODE_LOW, FILTER_FLAG_ENCODE_HIGH 	URL-encode string, optionally strip or encode special characters.
FILTER_SANITIZE_MAGIC_QUOTES 	"magic_quotes" 	  	Apply addslashes().
FILTER_SANITIZE_NUMBER_FLOAT 	"number_float" 	FILTER_FLAG_ALLOW_FRACTION, FILTER_FLAG_ALLOW_THOUSAND, FILTER_FLAG_ALLOW_SCIENTIFIC 	Remove all characters except digits, +- and optionally .,eE.
FILTER_SANITIZE_NUMBER_INT 	"number_int" 	  	Remove all characters except digits, plus and minus sign.
FILTER_SANITIZE_SPECIAL_CHARS 	"special_chars" 	FILTER_FLAG_STRIP_LOW, FILTER_FLAG_STRIP_HIGH, FILTER_FLAG_STRIP_BACKTICK, FILTER_FLAG_ENCODE_HIGH 	HTML-escape '"<>& and characters with ASCII value less than 32, optionally strip or encode other special characters.
FILTER_SANITIZE_FULL_SPECIAL_CHARS 	"full_special_chars" 	FILTER_FLAG_NO_ENCODE_QUOTES, 	Equivalent to calling htmlspecialchars() with ENT_QUOTES set. Encoding quotes can be disabled by setting FILTER_FLAG_NO_ENCODE_QUOTES. Like htmlspecialchars(), this filter is aware of the default_charset and if a sequence of bytes is detected that makes up an invalid character in the current character set then the entire string is rejected resulting in a 0-length string. When using this filter as a default filter, see the warning below about setting the default flags to 0.
FILTER_SANITIZE_STRING 	"string" 	FILTER_FLAG_NO_ENCODE_QUOTES, FILTER_FLAG_STRIP_LOW, FILTER_FLAG_STRIP_HIGH, FILTER_FLAG_STRIP_BACKTICK, FILTER_FLAG_ENCODE_LOW, FILTER_FLAG_ENCODE_HIGH, FILTER_FLAG_ENCODE_AMP 	Strip tags, optionally strip or encode special characters.
FILTER_SANITIZE_STRIPPED 	"stripped" 	  	Alias of "string" filter.
FILTER_SANITIZE_URL 	"url" 	  	Remove all characters except letters, digits and $-_.+!*'(),{}|\\^~[]`<>#%";/?:@&=.
FILTER_UNSAFE_RAW 	"unsafe_raw" 	FILTER_FLAG_STRIP_LOW, FILTER_FLAG_STRIP_HIGH, FILTER_FLAG_STRIP_BACKTICK, FILTER_FLAG_ENCODE_LOW, FILTER_FLAG_ENCODE_HIGH, FILTER_FLAG_ENCODE_AMP 	Do nothing, optionally strip or encode special characters. This filter is also aliased to FILTER_DEFAULT.
Warning

When using one of these filters as a default filter either through your ini file or through your web server's configuration, the default flags is set to FILTER_FLAG_NO_ENCODE_QUOTES. You need to explicitly set filter.default_flags to 0 to have quotes encoded by default. Like this:

Example #1 Configuring the default filter to act like htmlspecialchars
filter.default = full_special_chars
filter.default_flags = 0


Filter flags

List of filter flags ID 	Used with 	Description
FILTER_FLAG_STRIP_LOW 	FILTER_SANITIZE_ENCODED, FILTER_SANITIZE_SPECIAL_CHARS, FILTER_SANITIZE_STRING, FILTER_UNSAFE_RAW 	Strips characters that have a numerical value <32.
FILTER_FLAG_STRIP_HIGH 	FILTER_SANITIZE_ENCODED, FILTER_SANITIZE_SPECIAL_CHARS, FILTER_SANITIZE_STRING, FILTER_UNSAFE_RAW 	Strips characters that have a numerical value >127.
FILTER_FLAG_STRIP_BACKTICK 	FILTER_SANITIZE_ENCODED, FILTER_SANITIZE_SPECIAL_CHARS, FILTER_SANITIZE_STRING, FILTER_UNSAFE_RAW 	Strips backtick characters.
FILTER_FLAG_ALLOW_FRACTION 	FILTER_SANITIZE_NUMBER_FLOAT 	Allows a period (.) as a fractional separator in numbers.
FILTER_FLAG_ALLOW_THOUSAND 	FILTER_SANITIZE_NUMBER_FLOAT, FILTER_VALIDATE_FLOAT 	Allows a comma (,) as a thousands separator in numbers.
FILTER_FLAG_ALLOW_SCIENTIFIC 	FILTER_SANITIZE_NUMBER_FLOAT 	Allows an e or E for scientific notation in numbers.
FILTER_FLAG_NO_ENCODE_QUOTES 	FILTER_SANITIZE_STRING 	If this flag is present, single (') and double (") quotes will not be encoded.
FILTER_FLAG_ENCODE_LOW 	FILTER_SANITIZE_ENCODED, FILTER_SANITIZE_STRING, FILTER_SANITIZE_RAW 	Encodes all characters with a numerical value <32.
FILTER_FLAG_ENCODE_HIGH 	FILTER_SANITIZE_ENCODED, FILTER_SANITIZE_SPECIAL_CHARS, FILTER_SANITIZE_STRING, FILTER_SANITIZE_RAW 	Encodes all characters with a numerical value >127.
FILTER_FLAG_ENCODE_AMP 	FILTER_SANITIZE_STRING, FILTER_SANITIZE_RAW 	Encodes ampersands (&).
FILTER_NULL_ON_FAILURE 	FILTER_VALIDATE_BOOLEAN 	Returns NULL for unrecognized boolean values.
FILTER_FLAG_ALLOW_OCTAL 	FILTER_VALIDATE_INT 	Regards inputs starting with a zero (0) as octal numbers. This only allows the succeeding digits to be 0-7.
FILTER_FLAG_ALLOW_HEX 	FILTER_VALIDATE_INT 	Regards inputs starting with 0x or 0X as hexadecimal numbers. This only allows succeeding characters to be a-fA-F0-9.
FILTER_FLAG_EMAIL_UNICODE 	FILTER_VALIDATE_EMAIL 	Allows the local part of the email address to contain Unicode characters.
FILTER_FLAG_IPV4 	FILTER_VALIDATE_IP 	Allows the IP address to be in IPv4 format.
FILTER_FLAG_IPV6 	FILTER_VALIDATE_IP 	Allows the IP address to be in IPv6 format.
FILTER_FLAG_NO_PRIV_RANGE 	FILTER_VALIDATE_IP 	

Fails validation for the following private IPv4 ranges: 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16.

Fails validation for the IPv6 addresses starting with FD or FC.
FILTER_FLAG_NO_RES_RANGE 	FILTER_VALIDATE_IP 	

Fails validation for the following reserved IPv4 ranges: 0.0.0.0/8, 169.254.0.0/16, 127.0.0.0/8 and 240.0.0.0/4.

Fails validation for the following reserved IPv6 ranges: ::1/128, ::/128, ::ffff:0:0/96 and fe80::/10.
FILTER_FLAG_SCHEME_REQUIRED 	FILTER_VALIDATE_URL 	Requires the URL to contain a scheme part.
FILTER_FLAG_HOST_REQUIRED 	FILTER_VALIDATE_URL 	Requires the URL to contain a host part.
FILTER_FLAG_PATH_REQUIRED 	FILTER_VALIDATE_URL 	Requires the URL to contain a path part.
FILTER_FLAG_QUERY_REQUIRED 	FILTER_VALIDATE_URL 	Requires the URL to contain a query string.
FILTER_REQUIRE_SCALAR 		Requires the value to be scalar.
FILTER_REQUIRE_ARRAY 		Requires the value to be an array.
FILTER_FORCE_ARRAY 		If the value is a scalar, it is treated as array with the scalar value as only element. 


