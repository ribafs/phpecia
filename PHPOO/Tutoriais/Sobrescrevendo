Sobrescrevendo Métodos e Propriedades Herdadas
Para alterar uma propriedade ou o comportamento de um método existente na nova classe, você pode, simplesmente, sobrescreve-los, bastando redeclará-los na nova classe:
<?php

class MyClass
{
  public $prop1 = "Sou uma propriedade de classe!";

  public function __construct()
  {
      echo 'A classe "', __CLASS__, '" foi instanciada!<br />';
  }

  public function __destruct()
  {
      echo 'A classe "', __CLASS__, '" foi destruída.<br />';
  }

  public function __toString()
  {
      echo "Usando o método toString: ";
      return $this->getProperty();
  }

  public function setProperty($newval)
  {
      $this->prop1 = $newval;
  }

  public function getProperty()
  {
      return $this->prop1 . "<br />";
  }
}

class MyOtherClass extends MyClass
{
  public function __construct()
  {
      echo "Um novo construtor em " . __CLASS__ . ".<br />";
  }

  public function newMethod()
  {
      echo "De um novo método na classe " . __CLASS__ . ".<br />";
  }
}

// Cria um novo objeto
$newobj = new MyOtherClass;

// Usa o método da nova classe
echo $newobj->newMethod();

// Usa um método da classe pai
echo $newobj->getProperty();

?>
As mudanças no resultado serão:
Um novo construtor em MyOtherClass.
De um novo método na classe MyOtherClass.
Sou uma propriedade de classe!
A classe "MyClass" foi destruída.

Preservando Funcionalidades Originais de um Método Enquanto Sobrescreve o Mesmo
Para adicionar uma nova funcionalidade a um método e, ao mesmo tempo, manter a funcionalidade do método original intacta, use a palavra chave parent juntamente ao operador de resolução de escopo (::):
<?php

class MyClass
{
  public $prop1 = "Sou uma propriedade de classe!";

  public function __construct()
  {
      echo 'A classe "', __CLASS__, '" foi instanciada!<br />';
  }

  public function __destruct()
  {
      echo 'A classe "', __CLASS__, '" foi destruída.<br />';
  }

  public function __toString()
  {
      echo "Usando o método toString: ";
      return $this->getProperty();
  }

  public function setProperty($newval)
  {
      $this->prop1 = $newval;
  }

  public function getProperty()
  {
      return $this->prop1 . "<br />";
  }
}

class MyOtherClass extends MyClass
{
  public function __construct()
  {
      parent::__construct(); // Invoca o construtor da classe pai
      echo "Um novo construtor em " . __CLASS__ . ".<br />";
  }

  public function newMethod()
  {
      echo "De um novo método na classe " . __CLASS__ . ".<br />";
  }
}

// Cria um novo objeto
$newobj = new MyOtherClass;

// Usa o método da nova classe
echo $newobj->newMethod();

// Usa um método da classe pai
echo $newobj->getProperty();

?>
Dessa forma, será retornado tanto o que foi codificado no construtor pai quando o do construtor da nova classe:
A classe "MyClass" foi instanciada!
Um novo construtor em MyOtherClass.
De um novo método na classe MyOtherClass.
Sou uma propriedade de classe!
A classe "MyClass" foi destruída.

https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762
