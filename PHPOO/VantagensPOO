Principais vantagens da POO

A programação orientada a objetos traz uma ideia muito interessante: a representação de cada elemento em termos de um objeto, ou classe. Esse tipo de representação procura aproximar o sistema que está sendo criado ao que é observado no mundo real, e um objeto contém características e ações, assim como vemos na realidade. Esse tipo de representação traz algumas vantagens muito interessantes para os desenvolvedores e também para o usuário da aplicação. Veremos algumas delas a seguir.

A reutilização de código é um dos principais requisitos no desenvolvimento de software atual. Com a complexidade dos sistemas cada vez maior, o tempo de desenvolvimento iria aumentar exponencialmente caso não fosse possível a reutilização. A orientação a objetos permite que haja uma reutilização do código criado, diminuindo o tempo de desenvolvimento, bem como o número de linhas de código. Isso é possível devido ao fato de que as linguagens de programação orientada a objetos trazem representações muito claras de cada um dos elementos, e esses elementos normalmente não são interdependentes. Essa independência entre as partes do software é o que permite que esse código seja reutilizado em outros sistemas no futuro.

Outra grande vantagem que o desenvolvimento orientado a objetos traz diz respeito a leitura e manutenção de código. Como a representação do sistema se aproxima muito do que vemos na vida real, o entendimento do sistema como um todo e de cada parte individualmente fica muito mais simples. Isso permite que a equipe de desenvolvimento não fique dependente de uma pessoa apenas, como acontecia com frequência em linguagens estruturadas como o C, por exemplo.

A criação de bibliotecas é outro ponto que é muito mais simples com a orientação a objetos. No caso das linguagens estruturadas, como o C, temos que as bibliotecas são coleções de procedimentos (ou funções) que podem ser reutilizadas. No caso da POO, entretanto, as bibliotecas trazem representações de classes, que são muito mais claras para permitirem a reutilização.

Entretanto, nem tudo é perfeição na programação orientada a objetos. A execução de uma aplicação orientada a objetos é mais lenta do que o que vemos na programação estruturada, por exemplo. Isso acontece devido à complexidade do modelo, que traz representações na forma de classes. Essas representações irão fazer com que a execução do programa tenha muitos desvios, diferente da execução sequencial da programação estruturada. Esse é o grande motivo por trás da preferência pela linguagem C em hardware limitado, como sistemas embarcados. Também é o motivo pelo qual a programação para sistemas móveis como o Google Android, embora em Java (linguagem orientada a objetos), seja feita o menos orientada a objetos possível.

No momento atual em que estamos, tecnologicamente essa execução mais lenta não é sentida. Isso significa que, em termos de desenvolvimento de sistemas modernos, a programação orientada a objetos é a mais recomendada devido as vantagens que foram apresentadas. Essas vantagens são derivadas do modelo de programação, que busca uma representação baseada no que vemos no mundo real.
https://www.devmedia.com.br/os-4-pilares-da-programacao-orientada-a-objetos/9264 

Neste artigo, quero mostrar algumas diferenças entre a programação estruturada (PE) e a programação orientada a objetos (POO). Logo quando pensamos em criar um programa, temos que analisar qual programação é a mais adequada para um problema em questão. Tanto a programação PE ou a programação OO possuem seus pontos altos e baixos, porém a orientada a objetos tem ganhado a preferência dos desenvolvedores para os novos projetos. Graças a facilidade de manipular os dados pois trabalhamos com classes, objetos, herança, encapsulamento de regras de negócios, estruturas de dados, etc., onde cada classe tem seu objetivo específico, assim fazer qualquer alteração em seu código se torna muito mais fácil, mais rápido e sem “danos” em classes dependentes da mesma.

A programação estruturada é formada apenas por três estruturas, que são sequência, onde uma tarefa é executada logo após a outra, decisão quando um teste lógico é executado ou não, e iteração que a partir do teste lógico algum trecho do código pode ser repetido finitas vezes. Seus códigos ficam em um mesmo bloco, sendo mais difícil e demorado fazer uma alteração, pois teremos que olhar se nenhum outro código depende daquele, fazendo uma análise mais detalhada. É fácil de entender, sendo usada em cursos introdutórios a programação. No final deste artigo, vemos um exemplo de programação estruturada, um programa bem simples usado somente para exemplo. O mesmo exemplo está disponível para visualização, abaixo do exemplo da PE, onde criamos mais pacotes e classes como boas práticas para programar em OO.

Na imagem da programação estruturada, fica claro quando falamos em declarar variáveis, métodos e funções em uma mesma página. Na orientada a objeto vemos as classes, pacotes, e o que caracteriza uma POO.

Imagine fazer uma alteração em um formulário na programação estruturada, onde teremos que ver o que será afetado, onde teremos que reestruturar e assim olhar código por código e ver se nada foi afetado com a alteração. Na orientada a objetos as rotinas e funções estão em objetos separados, encapsulados, facilitando as alterações e atualizações. Procuramos a classe onde o método esta definido, e assim alterando somente aqueles métodos.

Na fábrica de software nosso foco é Java, e essa linguagem é toda orientada a objetos, pois não existe uma linguagem de PE para Java, onde aprendemos a lidar com classes, métodos, herança, polimorfismo entre outros que caracterizam uma POO. Na minha graduação em Tecnologia em Redes, estamos aprendendo a linguagem C estruturada, onde vemos as vantagens e desvantagens em cima da POO.

Minha opinião é que a melhor forma de programar é a orientada a objeto, pois fica bem mais fácil de manusear os códigos, através da herança podemos usar variáveis e métodos já declaradas em outras classes, fica fácil de dar manutenção no programa, fácil para outros programadores possam entende o raciocínio lógico e também alterar os códigos e em questões de segurança é difícil do código ser copiado graças ao encapsulamento das classes
http://fabrica.ms.senac.br/2013/04/programacao-estruturada-versus-programacao-orientada-a-objetos/

